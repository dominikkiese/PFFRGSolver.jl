# load code 
include("channel.jl")
include("vertex.jl")

abstract type action end

# load saving and reading for channels and vertices
include("disk.jl")

# load actions for different symmetries 
include("action_lib/action_sun.jl")

# load checkpoints for different actions 
include("checkpoint_lib/checkpoint_sun.jl")





# interface function to replace action with another action (except for bare)
function replace_with!(
    a1 :: action,
    a2 :: action
    )  :: Nothing

    # replace self energy 
    a1.Σ .= a2.Σ 

    # replace vertices 
    for i in eachindex(a1.Γ)
        replace_with!(a1.Γ[i], a2.Γ[i])
    end 

    return nothing 
end

# interface function to replace action with another action only on the vertex level (except for bare)
function replace_with_Γ!(
    a1 :: action,
    a2 :: action
    )  :: Nothing

    # replace vertices 
    for i in eachindex(a1.Γ)
        replace_with!(a1.Γ[i], a2.Γ[i])
    end 

    return nothing 
end

# interface function to multiply action with factor (except for bare)
function mult_with!(
    a   :: action,
    fac :: Float64
    )   :: Nothing

    # multiply self energy 
    a.Σ .*= fac 

    # multiply vertices 
    for i in eachindex(a.Γ)
        mult_with!(a.Γ[i], fac)
    end 

    return nothing 
end

# interface function to multiply action with factor only on the vertex level (except for bare)
function mult_with_Γ!(
    a   :: action,
    fac :: Float64
    )   :: Nothing

    # multiply vertices 
    for i in eachindex(a.Γ)
        mult_with!(a.Γ[i], fac)
    end 

    return nothing 
end

# interface function to reset an action to zero (except for bare)
function reset!(
    a :: action
    ) :: Nothing 

    mult_with!(a, 0.0)

    return nothing 
end

# interface function to reset an action to zero only on the vertex level (except for bare)
function reset_Γ!(
    a :: action
    ) :: Nothing 

    mult_with_Γ!(a, 0.0)

    return nothing 
end

# interface function to multiply action with some factor and add to other action (except for bare)
function mult_with_add_to!(
    a2  :: action,
    fac :: Float64,
    a1  :: action
    )   :: Nothing 

    # multiply add for the self energy 
    a1.Σ .+= fac .* a2.Σ

    # multiply add for the vertices 
    for i in eachindex(a1.Γ)
        mult_with_add_to!(a2.Γ[i], fac, a1.Γ[i])
    end 

    return nothing 
end

# interface function to multiply action with some factor and add to other action only on the vertex level (except for bare)
function mult_with_add_to_Γ!(
    a2  :: action,
    fac :: Float64,
    a1  :: action
    )   :: Nothing 

    # multiply add for the vertices 
    for i in eachindex(a1.Γ)
        mult_with_add_to!(a2.Γ[i], fac, a1.Γ[i])
    end 

    return nothing 
end

# interface function to add two actions (except for bare)
function add_to!(
    a2 :: action,
    a1 :: action
    )  :: Nothing 

    mult_with_add_to!(a2, 1.0, a1)

    return nothing 
end

# interface function to add two actions only on the vertex level (except for bare)
function add_to_Γ!(
    a2 :: action,
    a1 :: action
    )  :: Nothing 

    mult_with_add_to_Γ!(a2, 1.0, a1)

    return nothing 
end

# interface function to subtract two actions (except for bare)
function subtract_from!(
    a2 :: action,
    a1 :: action
    )  :: Nothing 

    mult_with_add_to!(a2, -1.0, a1)

    return nothing 
end

# interface function to subtract two actions only on the vertex level (except for bare)
function subtract_from_Γ!(
    a2 :: action,
    a1 :: action
    )  :: Nothing 

    mult_with_add_to_Γ!(a2, -1.0, a1)

    return nothing 
end

"""
    get_abs_max(
        a :: action
        ) :: Float64 

Returns maximum absolute value of an action.
"""
function get_abs_max(
    a :: action
    ) :: Float64 

    abs_max_Γ = zeros(Float64, length(a.Γ))

    for i in eachindex(a.Γ)
        abs_max_Γ[i] = get_abs_max(a.Γ[i])
    end 

    abs_max = maximum(abs_max_Γ)

    return abs_max 
end

# set asymptotic limits by scanning the boundaries of q3
function limits!(
    a :: action
    ) :: Nothing

    for i in eachindex(a.Γ)
        limits!(a.Γ[i])
    end
    
    return nothing 
end

# scan cut through channel where x is assumed to be generated by the get_mesh function (with linear fraction p0)
# returns width for linear part such that certain criteria are fulfilled:
# 1) if the maximum y_peak is located at x_peak = 0.0, ensure that a fraction p1 of the linearly spaced frequencies lies between 0.0 and the point where y = p2 * y_peak
# 2) if the maximum y_peak is located at x_peak > 0.0, ensure that a fraction p3 of the linearly spaced frequencies lies between 0.0 and x_peak (only if y_peak deviates by more than 10 percent from y(x = 0.0))
# 3) ensure that the linear spacing of x is not smaller than p4
# 4) ensure that the linear spacing of x does not shrink by more than 15 percent
function scan(
    x  :: Vector{Float64}, 
    y  :: Vector{Float64},
    p0 :: Float64,
    p1 :: Float64,
    p2 :: Float64,
    p3 :: Float64,
    p4 :: Float64
    )  :: Float64

    # get current width of linear part and determine position of the maximum
    num_lin  = ceil(Int64, p0 * (length(x) - 1))
    δ        = num_lin * x[2]
    max_loc  = argmax(abs.(y))
    rel_diff = abs(y[max_loc] - y[1]) / abs(y[max_loc])
    h_max    = 0.0

    # check if the maximum y_peak is located at x_peak = 0.0
    if max_loc == 1 || rel_diff <= 0.1
        # ensure that a fraction p1 of the linearly spaced frequencies lies between 0.0 and the point where y = p2 * y_peak
        decay_arg = 1 

        for i in 2 : length(y)
            if abs(y[i] / y[1]) < p2
                decay_arg = i - 1
                break 
            end
        end 

        h_max = max(p4, x[decay_arg] / floor(p1 * num_lin))
    # check if the maximum y_peak is located at x_peak > 0.0 (only if y_peak deviates by more than 10 percent from y(x = 0.0))
    else 
        # ensure that a fraction p3 of the linearly spaced frequencies lies between 0.0 and x_peak
        max_arg = 1

        for i in 2 : length(y)
            if sign(y[i + 1] - y[i]) != sign(y[2] - y[1])
                max_arg = i 
                break 
            end 
        end 

        h_max = max(p4, x[max_arg] / floor(p3 * num_lin))
    end

    # ensure that the linear spacing of x is not smaller than p4
    δ = min(max(δ, num_lin * p4), num_lin * h_max)

    # ensure that the linear spacing of x does not shrink by more than 15 percent
    δ = max(δ, 0.85 * num_lin * x[2])

    return δ
end

# resample an action to new meshes via scanning and trilinear interpolation
function resample_from_to( 
    Λ     :: Float64,
    Z     :: Float64,
    m_old :: mesh,
    a_old :: action,
    a_new :: action
    )     :: mesh

    # scan self energy 
    σ_lin = min(max(1.5 * m_old.σ[argmax(abs.(a_old.Σ))], 0.5 * Λ), 10.0 * Λ)

    # determine dominant vertex component
    max_comp = argmax(Float64[get_abs_max(a_old.Γ[i]) for i in eachindex(a_old.Γ)])

    # scan the s channel (u channel related by symmetries) 
    q3     = a_old.Γ[max_comp].ch_s.q3
    Ωs_lin = 0.0; Ωs_weight = 0.0
    νs_lin = 0.0; νs_weight = 0.0
    
    for site in 1 : size(q3, 1)
        q3_Ω    = q3[site, :, 1, 1]
        q3_ν    = Float64[q3[site, 1, x, x] - q3[site, 1, end, end] for x in 1 : m_old.num_ν]
        Ωs_lin += maximum(abs.(q3_Ω)) * scan(m_old.Ωs, q3_Ω, 0.3, 0.5, 0.5, 0.33, 0.05 * Λ); Ωs_weight += maximum(abs.(q3_Ω))
        νs_lin += maximum(abs.(q3_ν)) * scan(m_old.νs, q3_ν, 0.5, 0.5, 0.5, 0.33, 0.05 * Λ); νs_weight += maximum(abs.(q3_ν))
    end

    Ωs_lin /= Ωs_weight
    νs_lin /= νs_weight

    # scan the t channel
    q3     = a_old.Γ[max_comp].ch_t.q3
    Ωt_lin = 0.0; Ωt_weight = 0.0
    νt_lin = 0.0; νt_weight = 0.0

    for site in 1 : size(q3, 1)
        q3_Ω    = q3[site, :, 1, 1]
        q3_ν    = Float64[q3[site, 1, x, x] - q3[site, 1, end, end] for x in 1 : m_old.num_ν]
        Ωt_lin += maximum(abs.(q3_Ω)) * scan(m_old.Ωt, q3_Ω, 0.3, 0.5, 0.5, 0.33, 0.05 * Λ); Ωt_weight += maximum(abs.(q3_Ω))
        νt_lin += maximum(abs.(q3_ν)) * scan(m_old.νt, q3_ν, 0.5, 0.5, 0.5, 0.33, 0.05 * Λ); νt_weight += maximum(abs.(q3_ν))
    end

    Ωt_lin /= Ωt_weight
    νt_lin /= νt_weight

    # build new frequency meshes
    Λ_ref = max(Λ, 0.3 * Z)
    σ     = get_mesh(min(σ_lin,  125.0 * Λ_ref), 250.0 * Λ_ref, m_old.num_σ - 1, 0.3)
    Ωs    = get_mesh(min(Ωs_lin,  75.0 * Λ_ref), 150.0 * Λ_ref, m_old.num_Ω - 1, 0.3)
    νs    = get_mesh(min(νs_lin,  30.0 * Λ_ref),  75.0 * Λ_ref, m_old.num_ν - 1, 0.5)
    Ωt    = get_mesh(min(Ωt_lin,  75.0 * Λ_ref), 150.0 * Λ_ref, m_old.num_Ω - 1, 0.3)
    νt    = get_mesh(min(νt_lin,  30.0 * Λ_ref),  75.0 * Λ_ref, m_old.num_ν - 1, 0.5)
    m_new = mesh(m_old.num_σ, m_old.num_Ω, m_old.num_ν, σ, Ωs, νs, Ωt, νt)

    # resample self energy 
    for w in eachindex(m_new.σ)
        a_new.Σ[w] = get_Σ(m_new.σ[w], m_old, a_old)
    end

    # resample vertices 
    for i in eachindex(a_new.Γ)
        resample_from_to!(m_old, a_old.Γ[i], m_new, a_new.Γ[i])
    end 

    println()
    println("Optimized linear frequency boundaries (in units of Λ):")
    println("σ  => $(σ_lin / Λ)")
    println("Ωs => $(Ωs_lin / Λ)")
    println("νs => $(νs_lin / Λ)")
    println("Ωt => $(Ωt_lin / Λ)")
    println("νt => $(νt_lin / Λ)")
    println()

    return m_new 
end





# interface function to obtain empty action 
function get_action_empty(
    symmetry :: String,
    r        :: reduced_lattice,
    m        :: mesh
    ;
    S        :: Float64 = 0.5,
    N        :: Float64 = 2.0
    )        :: action

    if symmetry == "sun"
        return get_action_sun_empty(S, N, r, m)
    end 
end

"""
    read_checkpoint(
        file     :: HDF5.File,
        symmetry :: String,
        Λ        :: Float64
        )        :: Tuple{Float64, Float64, mesh, action}

Read checkpoint of FRG calculation with a certain symmetry from HDF5 file. 
Returns cutoff Λ, ODE stepwidth dΛ, frequency meshes (wrapped in mesh struct) and vertices (wrapped in action struct).
"""
function read_checkpoint(
    file     :: HDF5.File,
    symmetry :: String,
    Λ        :: Float64
    )        :: Tuple{Float64, Float64, mesh, action}

    if symmetry == "sun"
        return read_checkpoint_sun(file, Λ)
    end 
end

